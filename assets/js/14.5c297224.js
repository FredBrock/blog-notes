(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{252:function(t,n,a){"use strict";a.r(n);var e=a(0),r=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vdom-必要性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vdom-必要性","aria-hidden":"true"}},[t._v("#")]),t._v(" vdom 必要性")]),t._v(" "),a("p",[t._v("DOM 工作得很好，除了它从来没有打算成为大规模动态接口的东西。用于操作 DOM 的 API 非常混乱，并且仅使用 vanilla Javascript 来操作 DOM 的代码库是 DOOMED。很明显，在特定节点上进行定位和执行操作并不是开发人员可以做的最好的工作。此外，跟踪 DOM 的先前状态是困难的。")]),t._v(" "),a("p",[t._v("在 Web 的另一端，有些开发人员只使用 innerHTML 将 html 字符串呈现到 DOM 中。这是非常糟糕的 m'Kay。这就是为什么 -")]),t._v(" "),a("p",[t._v("它解析 html 字符串并在最小的更改上重新呈现整个树。\n对组件中节点的引用将丢失。\n节点松散了附加到它们的事件。\n它不安全，因为任何类型的用户输入都将被解释为 html，因此代码将容易受到 XSS 的攻击。")]),t._v(" "),a("p",[t._v("问题一: 每次修改某一个 DOM 状态的时候都会重新呈现整个 DOM 树,这对于大型 DOM 树来说这是非常缓慢的。此外每次 DOM 在重新渲染的时候状态都会重置(比如表单聚焦，输入信息)。")])])}),[],!1,null,null,null);n.default=r.exports}}]);